// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: api/configuration/configuration.proto

package configuration

import (
	assessment "clouditor.io/clouditor/api/assessment"
	orchestrator "clouditor.io/clouditor/api/orchestrator"
	context "context"
	collection "github.com/eclipse-xfsc/cam/api/collection"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigurationClient is the client API for Configuration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigurationClient interface {
	StartMonitoring(ctx context.Context, in *StartMonitoringRequest, opts ...grpc.CallOption) (*StartMonitoringResponse, error)
	StopMonitoring(ctx context.Context, in *StopMonitoringRequest, opts ...grpc.CallOption) (*StopMonitoringResponse, error)
	// Retrieves the current monitoring status of the given service. The status
	// includes the controls which are currently being monitored and the times of
	// the last and next scheduled monitoring run. Returns 404 error when
	// monitoring for this service wasn't started yet. Returns empty list when
	// monitoring was started but is currently stopped/paused.
	GetMonitoringStatus(ctx context.Context, in *GetMonitoringStatusRequest, opts ...grpc.CallOption) (*MonitoringStatus, error)
	// Lists metrics. This function is a wrapper around the
	// Clouditor Orchestrator's identical function, but we explicitly specify it
	// here so that we can expose it via the configuration interfaces's REST API.
	ListMetrics(ctx context.Context, in *orchestrator.ListMetricsRequest, opts ...grpc.CallOption) (*orchestrator.ListMetricsResponse, error)
	// Retrieves a particular metric. This function is a wrapper around the
	// Clouditor Orchestrator's identical function, but we explicitly specify it
	// here so that we can expose it via the configuration interfaces's REST API.
	GetMetric(ctx context.Context, in *orchestrator.GetMetricRequest, opts ...grpc.CallOption) (*assessment.Metric, error)
	// Retrieves a metric configuration (target value and operator) for a specific
	// service and metric ID. This function is a wrapper around the Clouditor
	// Orchestrator's identical function, but we explicitly specify it here so
	// that we can expose it via the configuration interfaces's REST API.
	GetMetricConfiguration(ctx context.Context, in *orchestrator.GetMetricConfigurationRequest, opts ...grpc.CallOption) (*assessment.MetricConfiguration, error)
	// Updates a metric configuration (target value and operator) for a specific
	// service and metric ID. This function is a wrapper around the Clouditor
	// Orchestrator's identical function, but we explicitly specify it here so
	// that we can expose it via the configuration interfaces's REST API.
	UpdateMetricConfiguration(ctx context.Context, in *orchestrator.UpdateMetricConfigurationRequest, opts ...grpc.CallOption) (*assessment.MetricConfiguration, error)
	// Registers a new target cloud service. This function is a wrapper around the
	// Clouditor Orchestrator's identical function, but we explicitly specify it
	// here so that we can expose it via the configuration interfaces's REST API.
	RegisterCloudService(ctx context.Context, in *orchestrator.RegisterCloudServiceRequest, opts ...grpc.CallOption) (*orchestrator.CloudService, error)
	// Registers a new target cloud service. This function is a wrapper around the
	// Clouditor Orchestrator's identical function, but we explicitly specify it
	// here so that we can expose it via the configuration interfaces's REST API.
	UpdateCloudService(ctx context.Context, in *orchestrator.UpdateCloudServiceRequest, opts ...grpc.CallOption) (*orchestrator.CloudService, error)
	ConfigureCloudService(ctx context.Context, in *ConfigureCloudServiceRequest, opts ...grpc.CallOption) (*ConfigureCloudServiceResponse, error)
	ListCloudServiceConfigurations(ctx context.Context, in *ListCloudServiceConfigurationsRequest, opts ...grpc.CallOption) (*ListCloudServiceConfigurationsResponse, error)
	// Retrieves a target cloud service. This function is a wrapper around the
	// Clouditor Orchestrator's identical function, but we explicitly specify it
	// here so that we can expose it via the configuration interfaces's REST API.
	GetCloudService(ctx context.Context, in *orchestrator.GetCloudServiceRequest, opts ...grpc.CallOption) (*orchestrator.CloudService, error)
	// Lists all target cloud services. This function is a wrapper around the
	// Clouditor Orchestrator's identical function, but we explicitly specify it
	// here so that we can expose it via the configuration interfaces's REST API.
	ListCloudServices(ctx context.Context, in *orchestrator.ListCloudServicesRequest, opts ...grpc.CallOption) (*orchestrator.ListCloudServicesResponse, error)
	// Removes a target cloud service. This function is a wrapper around the
	// Clouditor Orchestrator's identical function, but we explicitly specify it
	// here so that we can expose it via the configuration interfaces's REST API.
	RemoveCloudService(ctx context.Context, in *orchestrator.RemoveCloudServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListControls(ctx context.Context, in *orchestrator.ListRequirementsRequest, opts ...grpc.CallOption) (*orchestrator.ListRequirementsResponse, error)
	ListCollectionModules(ctx context.Context, in *ListCollectionModulesRequest, opts ...grpc.CallOption) (*ListCollectionModulesResponse, error)
	AddCollectionModule(ctx context.Context, in *AddCollectionModuleRequest, opts ...grpc.CallOption) (*collection.CollectionModule, error)
	RemoveCollectionModule(ctx context.Context, in *RemoveCollectionModuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type configurationClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigurationClient(cc grpc.ClientConnInterface) ConfigurationClient {
	return &configurationClient{cc}
}

func (c *configurationClient) StartMonitoring(ctx context.Context, in *StartMonitoringRequest, opts ...grpc.CallOption) (*StartMonitoringResponse, error) {
	out := new(StartMonitoringResponse)
	err := c.cc.Invoke(ctx, "/cam.Configuration/StartMonitoring", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) StopMonitoring(ctx context.Context, in *StopMonitoringRequest, opts ...grpc.CallOption) (*StopMonitoringResponse, error) {
	out := new(StopMonitoringResponse)
	err := c.cc.Invoke(ctx, "/cam.Configuration/StopMonitoring", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) GetMonitoringStatus(ctx context.Context, in *GetMonitoringStatusRequest, opts ...grpc.CallOption) (*MonitoringStatus, error) {
	out := new(MonitoringStatus)
	err := c.cc.Invoke(ctx, "/cam.Configuration/GetMonitoringStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) ListMetrics(ctx context.Context, in *orchestrator.ListMetricsRequest, opts ...grpc.CallOption) (*orchestrator.ListMetricsResponse, error) {
	out := new(orchestrator.ListMetricsResponse)
	err := c.cc.Invoke(ctx, "/cam.Configuration/ListMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) GetMetric(ctx context.Context, in *orchestrator.GetMetricRequest, opts ...grpc.CallOption) (*assessment.Metric, error) {
	out := new(assessment.Metric)
	err := c.cc.Invoke(ctx, "/cam.Configuration/GetMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) GetMetricConfiguration(ctx context.Context, in *orchestrator.GetMetricConfigurationRequest, opts ...grpc.CallOption) (*assessment.MetricConfiguration, error) {
	out := new(assessment.MetricConfiguration)
	err := c.cc.Invoke(ctx, "/cam.Configuration/GetMetricConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) UpdateMetricConfiguration(ctx context.Context, in *orchestrator.UpdateMetricConfigurationRequest, opts ...grpc.CallOption) (*assessment.MetricConfiguration, error) {
	out := new(assessment.MetricConfiguration)
	err := c.cc.Invoke(ctx, "/cam.Configuration/UpdateMetricConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) RegisterCloudService(ctx context.Context, in *orchestrator.RegisterCloudServiceRequest, opts ...grpc.CallOption) (*orchestrator.CloudService, error) {
	out := new(orchestrator.CloudService)
	err := c.cc.Invoke(ctx, "/cam.Configuration/RegisterCloudService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) UpdateCloudService(ctx context.Context, in *orchestrator.UpdateCloudServiceRequest, opts ...grpc.CallOption) (*orchestrator.CloudService, error) {
	out := new(orchestrator.CloudService)
	err := c.cc.Invoke(ctx, "/cam.Configuration/UpdateCloudService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) ConfigureCloudService(ctx context.Context, in *ConfigureCloudServiceRequest, opts ...grpc.CallOption) (*ConfigureCloudServiceResponse, error) {
	out := new(ConfigureCloudServiceResponse)
	err := c.cc.Invoke(ctx, "/cam.Configuration/ConfigureCloudService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) ListCloudServiceConfigurations(ctx context.Context, in *ListCloudServiceConfigurationsRequest, opts ...grpc.CallOption) (*ListCloudServiceConfigurationsResponse, error) {
	out := new(ListCloudServiceConfigurationsResponse)
	err := c.cc.Invoke(ctx, "/cam.Configuration/ListCloudServiceConfigurations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) GetCloudService(ctx context.Context, in *orchestrator.GetCloudServiceRequest, opts ...grpc.CallOption) (*orchestrator.CloudService, error) {
	out := new(orchestrator.CloudService)
	err := c.cc.Invoke(ctx, "/cam.Configuration/GetCloudService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) ListCloudServices(ctx context.Context, in *orchestrator.ListCloudServicesRequest, opts ...grpc.CallOption) (*orchestrator.ListCloudServicesResponse, error) {
	out := new(orchestrator.ListCloudServicesResponse)
	err := c.cc.Invoke(ctx, "/cam.Configuration/ListCloudServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) RemoveCloudService(ctx context.Context, in *orchestrator.RemoveCloudServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cam.Configuration/RemoveCloudService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) ListControls(ctx context.Context, in *orchestrator.ListRequirementsRequest, opts ...grpc.CallOption) (*orchestrator.ListRequirementsResponse, error) {
	out := new(orchestrator.ListRequirementsResponse)
	err := c.cc.Invoke(ctx, "/cam.Configuration/ListControls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) ListCollectionModules(ctx context.Context, in *ListCollectionModulesRequest, opts ...grpc.CallOption) (*ListCollectionModulesResponse, error) {
	out := new(ListCollectionModulesResponse)
	err := c.cc.Invoke(ctx, "/cam.Configuration/ListCollectionModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) AddCollectionModule(ctx context.Context, in *AddCollectionModuleRequest, opts ...grpc.CallOption) (*collection.CollectionModule, error) {
	out := new(collection.CollectionModule)
	err := c.cc.Invoke(ctx, "/cam.Configuration/AddCollectionModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) RemoveCollectionModule(ctx context.Context, in *RemoveCollectionModuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cam.Configuration/RemoveCollectionModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigurationServer is the server API for Configuration service.
// All implementations must embed UnimplementedConfigurationServer
// for forward compatibility
type ConfigurationServer interface {
	StartMonitoring(context.Context, *StartMonitoringRequest) (*StartMonitoringResponse, error)
	StopMonitoring(context.Context, *StopMonitoringRequest) (*StopMonitoringResponse, error)
	// Retrieves the current monitoring status of the given service. The status
	// includes the controls which are currently being monitored and the times of
	// the last and next scheduled monitoring run. Returns 404 error when
	// monitoring for this service wasn't started yet. Returns empty list when
	// monitoring was started but is currently stopped/paused.
	GetMonitoringStatus(context.Context, *GetMonitoringStatusRequest) (*MonitoringStatus, error)
	// Lists metrics. This function is a wrapper around the
	// Clouditor Orchestrator's identical function, but we explicitly specify it
	// here so that we can expose it via the configuration interfaces's REST API.
	ListMetrics(context.Context, *orchestrator.ListMetricsRequest) (*orchestrator.ListMetricsResponse, error)
	// Retrieves a particular metric. This function is a wrapper around the
	// Clouditor Orchestrator's identical function, but we explicitly specify it
	// here so that we can expose it via the configuration interfaces's REST API.
	GetMetric(context.Context, *orchestrator.GetMetricRequest) (*assessment.Metric, error)
	// Retrieves a metric configuration (target value and operator) for a specific
	// service and metric ID. This function is a wrapper around the Clouditor
	// Orchestrator's identical function, but we explicitly specify it here so
	// that we can expose it via the configuration interfaces's REST API.
	GetMetricConfiguration(context.Context, *orchestrator.GetMetricConfigurationRequest) (*assessment.MetricConfiguration, error)
	// Updates a metric configuration (target value and operator) for a specific
	// service and metric ID. This function is a wrapper around the Clouditor
	// Orchestrator's identical function, but we explicitly specify it here so
	// that we can expose it via the configuration interfaces's REST API.
	UpdateMetricConfiguration(context.Context, *orchestrator.UpdateMetricConfigurationRequest) (*assessment.MetricConfiguration, error)
	// Registers a new target cloud service. This function is a wrapper around the
	// Clouditor Orchestrator's identical function, but we explicitly specify it
	// here so that we can expose it via the configuration interfaces's REST API.
	RegisterCloudService(context.Context, *orchestrator.RegisterCloudServiceRequest) (*orchestrator.CloudService, error)
	// Registers a new target cloud service. This function is a wrapper around the
	// Clouditor Orchestrator's identical function, but we explicitly specify it
	// here so that we can expose it via the configuration interfaces's REST API.
	UpdateCloudService(context.Context, *orchestrator.UpdateCloudServiceRequest) (*orchestrator.CloudService, error)
	ConfigureCloudService(context.Context, *ConfigureCloudServiceRequest) (*ConfigureCloudServiceResponse, error)
	ListCloudServiceConfigurations(context.Context, *ListCloudServiceConfigurationsRequest) (*ListCloudServiceConfigurationsResponse, error)
	// Retrieves a target cloud service. This function is a wrapper around the
	// Clouditor Orchestrator's identical function, but we explicitly specify it
	// here so that we can expose it via the configuration interfaces's REST API.
	GetCloudService(context.Context, *orchestrator.GetCloudServiceRequest) (*orchestrator.CloudService, error)
	// Lists all target cloud services. This function is a wrapper around the
	// Clouditor Orchestrator's identical function, but we explicitly specify it
	// here so that we can expose it via the configuration interfaces's REST API.
	ListCloudServices(context.Context, *orchestrator.ListCloudServicesRequest) (*orchestrator.ListCloudServicesResponse, error)
	// Removes a target cloud service. This function is a wrapper around the
	// Clouditor Orchestrator's identical function, but we explicitly specify it
	// here so that we can expose it via the configuration interfaces's REST API.
	RemoveCloudService(context.Context, *orchestrator.RemoveCloudServiceRequest) (*emptypb.Empty, error)
	ListControls(context.Context, *orchestrator.ListRequirementsRequest) (*orchestrator.ListRequirementsResponse, error)
	ListCollectionModules(context.Context, *ListCollectionModulesRequest) (*ListCollectionModulesResponse, error)
	AddCollectionModule(context.Context, *AddCollectionModuleRequest) (*collection.CollectionModule, error)
	RemoveCollectionModule(context.Context, *RemoveCollectionModuleRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedConfigurationServer()
}

// UnimplementedConfigurationServer must be embedded to have forward compatible implementations.
type UnimplementedConfigurationServer struct {
}

func (UnimplementedConfigurationServer) StartMonitoring(context.Context, *StartMonitoringRequest) (*StartMonitoringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMonitoring not implemented")
}
func (UnimplementedConfigurationServer) StopMonitoring(context.Context, *StopMonitoringRequest) (*StopMonitoringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopMonitoring not implemented")
}
func (UnimplementedConfigurationServer) GetMonitoringStatus(context.Context, *GetMonitoringStatusRequest) (*MonitoringStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitoringStatus not implemented")
}
func (UnimplementedConfigurationServer) ListMetrics(context.Context, *orchestrator.ListMetricsRequest) (*orchestrator.ListMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetrics not implemented")
}
func (UnimplementedConfigurationServer) GetMetric(context.Context, *orchestrator.GetMetricRequest) (*assessment.Metric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetric not implemented")
}
func (UnimplementedConfigurationServer) GetMetricConfiguration(context.Context, *orchestrator.GetMetricConfigurationRequest) (*assessment.MetricConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricConfiguration not implemented")
}
func (UnimplementedConfigurationServer) UpdateMetricConfiguration(context.Context, *orchestrator.UpdateMetricConfigurationRequest) (*assessment.MetricConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricConfiguration not implemented")
}
func (UnimplementedConfigurationServer) RegisterCloudService(context.Context, *orchestrator.RegisterCloudServiceRequest) (*orchestrator.CloudService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCloudService not implemented")
}
func (UnimplementedConfigurationServer) UpdateCloudService(context.Context, *orchestrator.UpdateCloudServiceRequest) (*orchestrator.CloudService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloudService not implemented")
}
func (UnimplementedConfigurationServer) ConfigureCloudService(context.Context, *ConfigureCloudServiceRequest) (*ConfigureCloudServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureCloudService not implemented")
}
func (UnimplementedConfigurationServer) ListCloudServiceConfigurations(context.Context, *ListCloudServiceConfigurationsRequest) (*ListCloudServiceConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudServiceConfigurations not implemented")
}
func (UnimplementedConfigurationServer) GetCloudService(context.Context, *orchestrator.GetCloudServiceRequest) (*orchestrator.CloudService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudService not implemented")
}
func (UnimplementedConfigurationServer) ListCloudServices(context.Context, *orchestrator.ListCloudServicesRequest) (*orchestrator.ListCloudServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudServices not implemented")
}
func (UnimplementedConfigurationServer) RemoveCloudService(context.Context, *orchestrator.RemoveCloudServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCloudService not implemented")
}
func (UnimplementedConfigurationServer) ListControls(context.Context, *orchestrator.ListRequirementsRequest) (*orchestrator.ListRequirementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListControls not implemented")
}
func (UnimplementedConfigurationServer) ListCollectionModules(context.Context, *ListCollectionModulesRequest) (*ListCollectionModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollectionModules not implemented")
}
func (UnimplementedConfigurationServer) AddCollectionModule(context.Context, *AddCollectionModuleRequest) (*collection.CollectionModule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollectionModule not implemented")
}
func (UnimplementedConfigurationServer) RemoveCollectionModule(context.Context, *RemoveCollectionModuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCollectionModule not implemented")
}
func (UnimplementedConfigurationServer) mustEmbedUnimplementedConfigurationServer() {}

// UnsafeConfigurationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigurationServer will
// result in compilation errors.
type UnsafeConfigurationServer interface {
	mustEmbedUnimplementedConfigurationServer()
}

func RegisterConfigurationServer(s grpc.ServiceRegistrar, srv ConfigurationServer) {
	s.RegisterService(&Configuration_ServiceDesc, srv)
}

func _Configuration_StartMonitoring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMonitoringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).StartMonitoring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Configuration/StartMonitoring",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).StartMonitoring(ctx, req.(*StartMonitoringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_StopMonitoring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopMonitoringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).StopMonitoring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Configuration/StopMonitoring",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).StopMonitoring(ctx, req.(*StopMonitoringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_GetMonitoringStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonitoringStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).GetMonitoringStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Configuration/GetMonitoringStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).GetMonitoringStatus(ctx, req.(*GetMonitoringStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_ListMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(orchestrator.ListMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).ListMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Configuration/ListMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).ListMetrics(ctx, req.(*orchestrator.ListMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_GetMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(orchestrator.GetMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).GetMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Configuration/GetMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).GetMetric(ctx, req.(*orchestrator.GetMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_GetMetricConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(orchestrator.GetMetricConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).GetMetricConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Configuration/GetMetricConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).GetMetricConfiguration(ctx, req.(*orchestrator.GetMetricConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_UpdateMetricConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(orchestrator.UpdateMetricConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).UpdateMetricConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Configuration/UpdateMetricConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).UpdateMetricConfiguration(ctx, req.(*orchestrator.UpdateMetricConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_RegisterCloudService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(orchestrator.RegisterCloudServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).RegisterCloudService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Configuration/RegisterCloudService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).RegisterCloudService(ctx, req.(*orchestrator.RegisterCloudServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_UpdateCloudService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(orchestrator.UpdateCloudServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).UpdateCloudService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Configuration/UpdateCloudService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).UpdateCloudService(ctx, req.(*orchestrator.UpdateCloudServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_ConfigureCloudService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureCloudServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).ConfigureCloudService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Configuration/ConfigureCloudService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).ConfigureCloudService(ctx, req.(*ConfigureCloudServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_ListCloudServiceConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudServiceConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).ListCloudServiceConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Configuration/ListCloudServiceConfigurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).ListCloudServiceConfigurations(ctx, req.(*ListCloudServiceConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_GetCloudService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(orchestrator.GetCloudServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).GetCloudService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Configuration/GetCloudService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).GetCloudService(ctx, req.(*orchestrator.GetCloudServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_ListCloudServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(orchestrator.ListCloudServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).ListCloudServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Configuration/ListCloudServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).ListCloudServices(ctx, req.(*orchestrator.ListCloudServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_RemoveCloudService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(orchestrator.RemoveCloudServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).RemoveCloudService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Configuration/RemoveCloudService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).RemoveCloudService(ctx, req.(*orchestrator.RemoveCloudServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_ListControls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(orchestrator.ListRequirementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).ListControls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Configuration/ListControls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).ListControls(ctx, req.(*orchestrator.ListRequirementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_ListCollectionModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).ListCollectionModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Configuration/ListCollectionModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).ListCollectionModules(ctx, req.(*ListCollectionModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_AddCollectionModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollectionModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).AddCollectionModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Configuration/AddCollectionModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).AddCollectionModule(ctx, req.(*AddCollectionModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_RemoveCollectionModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCollectionModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).RemoveCollectionModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Configuration/RemoveCollectionModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).RemoveCollectionModule(ctx, req.(*RemoveCollectionModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Configuration_ServiceDesc is the grpc.ServiceDesc for Configuration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Configuration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cam.Configuration",
	HandlerType: (*ConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartMonitoring",
			Handler:    _Configuration_StartMonitoring_Handler,
		},
		{
			MethodName: "StopMonitoring",
			Handler:    _Configuration_StopMonitoring_Handler,
		},
		{
			MethodName: "GetMonitoringStatus",
			Handler:    _Configuration_GetMonitoringStatus_Handler,
		},
		{
			MethodName: "ListMetrics",
			Handler:    _Configuration_ListMetrics_Handler,
		},
		{
			MethodName: "GetMetric",
			Handler:    _Configuration_GetMetric_Handler,
		},
		{
			MethodName: "GetMetricConfiguration",
			Handler:    _Configuration_GetMetricConfiguration_Handler,
		},
		{
			MethodName: "UpdateMetricConfiguration",
			Handler:    _Configuration_UpdateMetricConfiguration_Handler,
		},
		{
			MethodName: "RegisterCloudService",
			Handler:    _Configuration_RegisterCloudService_Handler,
		},
		{
			MethodName: "UpdateCloudService",
			Handler:    _Configuration_UpdateCloudService_Handler,
		},
		{
			MethodName: "ConfigureCloudService",
			Handler:    _Configuration_ConfigureCloudService_Handler,
		},
		{
			MethodName: "ListCloudServiceConfigurations",
			Handler:    _Configuration_ListCloudServiceConfigurations_Handler,
		},
		{
			MethodName: "GetCloudService",
			Handler:    _Configuration_GetCloudService_Handler,
		},
		{
			MethodName: "ListCloudServices",
			Handler:    _Configuration_ListCloudServices_Handler,
		},
		{
			MethodName: "RemoveCloudService",
			Handler:    _Configuration_RemoveCloudService_Handler,
		},
		{
			MethodName: "ListControls",
			Handler:    _Configuration_ListControls_Handler,
		},
		{
			MethodName: "ListCollectionModules",
			Handler:    _Configuration_ListCollectionModules_Handler,
		},
		{
			MethodName: "AddCollectionModule",
			Handler:    _Configuration_AddCollectionModule_Handler,
		},
		{
			MethodName: "RemoveCollectionModule",
			Handler:    _Configuration_RemoveCollectionModule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/configuration/configuration.proto",
}
