// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: api/evaluation/evaluation.proto

package evaluation

import (
	context "context"
	common "github.com/eclipse-xfsc/cam/api/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EvaluationClient is the client API for Evaluation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EvaluationClient interface {
	SendEvidences(ctx context.Context, opts ...grpc.CallOption) (Evaluation_SendEvidencesClient, error)
	GetEvidence(ctx context.Context, in *GetEvidenceRequest, opts ...grpc.CallOption) (*common.Evidence, error)
	ListEvidences(ctx context.Context, in *ListEvidencesRequest, opts ...grpc.CallOption) (*ListEvidencesResponse, error)
	GetEvaluation(ctx context.Context, in *GetEvaluationRequest, opts ...grpc.CallOption) (*EvaluationResult, error)
	StreamEvaluations(ctx context.Context, in *StreamEvaluationsRequest, opts ...grpc.CallOption) (Evaluation_StreamEvaluationsClient, error)
	CalculateCompliance(ctx context.Context, in *CalculateComplianceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCompliance(ctx context.Context, in *GetComplianceRequest, opts ...grpc.CallOption) (*Compliance, error)
	ListCompliance(ctx context.Context, in *ListComplianceRequest, opts ...grpc.CallOption) (*ListComplianceResponse, error)
}

type evaluationClient struct {
	cc grpc.ClientConnInterface
}

func NewEvaluationClient(cc grpc.ClientConnInterface) EvaluationClient {
	return &evaluationClient{cc}
}

func (c *evaluationClient) SendEvidences(ctx context.Context, opts ...grpc.CallOption) (Evaluation_SendEvidencesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Evaluation_ServiceDesc.Streams[0], "/cam.Evaluation/SendEvidences", opts...)
	if err != nil {
		return nil, err
	}
	x := &evaluationSendEvidencesClient{stream}
	return x, nil
}

type Evaluation_SendEvidencesClient interface {
	Send(*common.Evidence) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type evaluationSendEvidencesClient struct {
	grpc.ClientStream
}

func (x *evaluationSendEvidencesClient) Send(m *common.Evidence) error {
	return x.ClientStream.SendMsg(m)
}

func (x *evaluationSendEvidencesClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *evaluationClient) GetEvidence(ctx context.Context, in *GetEvidenceRequest, opts ...grpc.CallOption) (*common.Evidence, error) {
	out := new(common.Evidence)
	err := c.cc.Invoke(ctx, "/cam.Evaluation/GetEvidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluationClient) ListEvidences(ctx context.Context, in *ListEvidencesRequest, opts ...grpc.CallOption) (*ListEvidencesResponse, error) {
	out := new(ListEvidencesResponse)
	err := c.cc.Invoke(ctx, "/cam.Evaluation/ListEvidences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluationClient) GetEvaluation(ctx context.Context, in *GetEvaluationRequest, opts ...grpc.CallOption) (*EvaluationResult, error) {
	out := new(EvaluationResult)
	err := c.cc.Invoke(ctx, "/cam.Evaluation/GetEvaluation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluationClient) StreamEvaluations(ctx context.Context, in *StreamEvaluationsRequest, opts ...grpc.CallOption) (Evaluation_StreamEvaluationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Evaluation_ServiceDesc.Streams[1], "/cam.Evaluation/StreamEvaluations", opts...)
	if err != nil {
		return nil, err
	}
	x := &evaluationStreamEvaluationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Evaluation_StreamEvaluationsClient interface {
	Recv() (*EvaluationResult, error)
	grpc.ClientStream
}

type evaluationStreamEvaluationsClient struct {
	grpc.ClientStream
}

func (x *evaluationStreamEvaluationsClient) Recv() (*EvaluationResult, error) {
	m := new(EvaluationResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *evaluationClient) CalculateCompliance(ctx context.Context, in *CalculateComplianceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cam.Evaluation/CalculateCompliance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluationClient) GetCompliance(ctx context.Context, in *GetComplianceRequest, opts ...grpc.CallOption) (*Compliance, error) {
	out := new(Compliance)
	err := c.cc.Invoke(ctx, "/cam.Evaluation/GetCompliance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluationClient) ListCompliance(ctx context.Context, in *ListComplianceRequest, opts ...grpc.CallOption) (*ListComplianceResponse, error) {
	out := new(ListComplianceResponse)
	err := c.cc.Invoke(ctx, "/cam.Evaluation/ListCompliance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EvaluationServer is the server API for Evaluation service.
// All implementations must embed UnimplementedEvaluationServer
// for forward compatibility
type EvaluationServer interface {
	SendEvidences(Evaluation_SendEvidencesServer) error
	GetEvidence(context.Context, *GetEvidenceRequest) (*common.Evidence, error)
	ListEvidences(context.Context, *ListEvidencesRequest) (*ListEvidencesResponse, error)
	GetEvaluation(context.Context, *GetEvaluationRequest) (*EvaluationResult, error)
	StreamEvaluations(*StreamEvaluationsRequest, Evaluation_StreamEvaluationsServer) error
	CalculateCompliance(context.Context, *CalculateComplianceRequest) (*emptypb.Empty, error)
	GetCompliance(context.Context, *GetComplianceRequest) (*Compliance, error)
	ListCompliance(context.Context, *ListComplianceRequest) (*ListComplianceResponse, error)
	mustEmbedUnimplementedEvaluationServer()
}

// UnimplementedEvaluationServer must be embedded to have forward compatible implementations.
type UnimplementedEvaluationServer struct {
}

func (UnimplementedEvaluationServer) SendEvidences(Evaluation_SendEvidencesServer) error {
	return status.Errorf(codes.Unimplemented, "method SendEvidences not implemented")
}
func (UnimplementedEvaluationServer) GetEvidence(context.Context, *GetEvidenceRequest) (*common.Evidence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvidence not implemented")
}
func (UnimplementedEvaluationServer) ListEvidences(context.Context, *ListEvidencesRequest) (*ListEvidencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvidences not implemented")
}
func (UnimplementedEvaluationServer) GetEvaluation(context.Context, *GetEvaluationRequest) (*EvaluationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluation not implemented")
}
func (UnimplementedEvaluationServer) StreamEvaluations(*StreamEvaluationsRequest, Evaluation_StreamEvaluationsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvaluations not implemented")
}
func (UnimplementedEvaluationServer) CalculateCompliance(context.Context, *CalculateComplianceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateCompliance not implemented")
}
func (UnimplementedEvaluationServer) GetCompliance(context.Context, *GetComplianceRequest) (*Compliance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompliance not implemented")
}
func (UnimplementedEvaluationServer) ListCompliance(context.Context, *ListComplianceRequest) (*ListComplianceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompliance not implemented")
}
func (UnimplementedEvaluationServer) mustEmbedUnimplementedEvaluationServer() {}

// UnsafeEvaluationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EvaluationServer will
// result in compilation errors.
type UnsafeEvaluationServer interface {
	mustEmbedUnimplementedEvaluationServer()
}

func RegisterEvaluationServer(s grpc.ServiceRegistrar, srv EvaluationServer) {
	s.RegisterService(&Evaluation_ServiceDesc, srv)
}

func _Evaluation_SendEvidences_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EvaluationServer).SendEvidences(&evaluationSendEvidencesServer{stream})
}

type Evaluation_SendEvidencesServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*common.Evidence, error)
	grpc.ServerStream
}

type evaluationSendEvidencesServer struct {
	grpc.ServerStream
}

func (x *evaluationSendEvidencesServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *evaluationSendEvidencesServer) Recv() (*common.Evidence, error) {
	m := new(common.Evidence)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Evaluation_GetEvidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvidenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluationServer).GetEvidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Evaluation/GetEvidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluationServer).GetEvidence(ctx, req.(*GetEvidenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Evaluation_ListEvidences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEvidencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluationServer).ListEvidences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Evaluation/ListEvidences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluationServer).ListEvidences(ctx, req.(*ListEvidencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Evaluation_GetEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluationServer).GetEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Evaluation/GetEvaluation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluationServer).GetEvaluation(ctx, req.(*GetEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Evaluation_StreamEvaluations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEvaluationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EvaluationServer).StreamEvaluations(m, &evaluationStreamEvaluationsServer{stream})
}

type Evaluation_StreamEvaluationsServer interface {
	Send(*EvaluationResult) error
	grpc.ServerStream
}

type evaluationStreamEvaluationsServer struct {
	grpc.ServerStream
}

func (x *evaluationStreamEvaluationsServer) Send(m *EvaluationResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Evaluation_CalculateCompliance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateComplianceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluationServer).CalculateCompliance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Evaluation/CalculateCompliance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluationServer).CalculateCompliance(ctx, req.(*CalculateComplianceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Evaluation_GetCompliance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComplianceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluationServer).GetCompliance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Evaluation/GetCompliance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluationServer).GetCompliance(ctx, req.(*GetComplianceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Evaluation_ListCompliance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListComplianceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluationServer).ListCompliance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Evaluation/ListCompliance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluationServer).ListCompliance(ctx, req.(*ListComplianceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Evaluation_ServiceDesc is the grpc.ServiceDesc for Evaluation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Evaluation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cam.Evaluation",
	HandlerType: (*EvaluationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvidence",
			Handler:    _Evaluation_GetEvidence_Handler,
		},
		{
			MethodName: "ListEvidences",
			Handler:    _Evaluation_ListEvidences_Handler,
		},
		{
			MethodName: "GetEvaluation",
			Handler:    _Evaluation_GetEvaluation_Handler,
		},
		{
			MethodName: "CalculateCompliance",
			Handler:    _Evaluation_CalculateCompliance_Handler,
		},
		{
			MethodName: "GetCompliance",
			Handler:    _Evaluation_GetCompliance_Handler,
		},
		{
			MethodName: "ListCompliance",
			Handler:    _Evaluation_ListCompliance_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendEvidences",
			Handler:       _Evaluation_SendEvidences_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamEvaluations",
			Handler:       _Evaluation_StreamEvaluations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/evaluation/evaluation.proto",
}
