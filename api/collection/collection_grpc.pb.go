// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: api/collection/collection.proto

package collection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollectionClient is the client API for Collection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionClient interface {
	// Trigger a collection module to do a single collection
	StartCollecting(ctx context.Context, in *StartCollectingRequest, opts ...grpc.CallOption) (*StartCollectingResponse, error)
	// StopCollecting is currently not used
	StopCollecting(ctx context.Context, in *StopCollectingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Set up a stream to a collection module for triggering multiple collections
	StartCollectingStream(ctx context.Context, opts ...grpc.CallOption) (Collection_StartCollectingStreamClient, error)
}

type collectionClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionClient(cc grpc.ClientConnInterface) CollectionClient {
	return &collectionClient{cc}
}

func (c *collectionClient) StartCollecting(ctx context.Context, in *StartCollectingRequest, opts ...grpc.CallOption) (*StartCollectingResponse, error) {
	out := new(StartCollectingResponse)
	err := c.cc.Invoke(ctx, "/cam.Collection/StartCollecting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionClient) StopCollecting(ctx context.Context, in *StopCollectingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cam.Collection/StopCollecting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionClient) StartCollectingStream(ctx context.Context, opts ...grpc.CallOption) (Collection_StartCollectingStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Collection_ServiceDesc.Streams[0], "/cam.Collection/StartCollectingStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectionStartCollectingStreamClient{stream}
	return x, nil
}

type Collection_StartCollectingStreamClient interface {
	Send(*StartCollectingRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type collectionStartCollectingStreamClient struct {
	grpc.ClientStream
}

func (x *collectionStartCollectingStreamClient) Send(m *StartCollectingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectionStartCollectingStreamClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CollectionServer is the server API for Collection service.
// All implementations must embed UnimplementedCollectionServer
// for forward compatibility
type CollectionServer interface {
	// Trigger a collection module to do a single collection
	StartCollecting(context.Context, *StartCollectingRequest) (*StartCollectingResponse, error)
	// StopCollecting is currently not used
	StopCollecting(context.Context, *StopCollectingRequest) (*emptypb.Empty, error)
	// Set up a stream to a collection module for triggering multiple collections
	StartCollectingStream(Collection_StartCollectingStreamServer) error
	mustEmbedUnimplementedCollectionServer()
}

// UnimplementedCollectionServer must be embedded to have forward compatible implementations.
type UnimplementedCollectionServer struct {
}

func (UnimplementedCollectionServer) StartCollecting(context.Context, *StartCollectingRequest) (*StartCollectingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCollecting not implemented")
}
func (UnimplementedCollectionServer) StopCollecting(context.Context, *StopCollectingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCollecting not implemented")
}
func (UnimplementedCollectionServer) StartCollectingStream(Collection_StartCollectingStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StartCollectingStream not implemented")
}
func (UnimplementedCollectionServer) mustEmbedUnimplementedCollectionServer() {}

// UnsafeCollectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionServer will
// result in compilation errors.
type UnsafeCollectionServer interface {
	mustEmbedUnimplementedCollectionServer()
}

func RegisterCollectionServer(s grpc.ServiceRegistrar, srv CollectionServer) {
	s.RegisterService(&Collection_ServiceDesc, srv)
}

func _Collection_StartCollecting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCollectingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServer).StartCollecting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Collection/StartCollecting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServer).StartCollecting(ctx, req.(*StartCollectingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collection_StopCollecting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopCollectingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServer).StopCollecting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cam.Collection/StopCollecting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServer).StopCollecting(ctx, req.(*StopCollectingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collection_StartCollectingStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectionServer).StartCollectingStream(&collectionStartCollectingStreamServer{stream})
}

type Collection_StartCollectingStreamServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*StartCollectingRequest, error)
	grpc.ServerStream
}

type collectionStartCollectingStreamServer struct {
	grpc.ServerStream
}

func (x *collectionStartCollectingStreamServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectionStartCollectingStreamServer) Recv() (*StartCollectingRequest, error) {
	m := new(StartCollectingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Collection_ServiceDesc is the grpc.ServiceDesc for Collection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Collection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cam.Collection",
	HandlerType: (*CollectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartCollecting",
			Handler:    _Collection_StartCollecting_Handler,
		},
		{
			MethodName: "StopCollecting",
			Handler:    _Collection_StopCollecting_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartCollectingStream",
			Handler:       _Collection_StartCollectingStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/collection/collection.proto",
}
